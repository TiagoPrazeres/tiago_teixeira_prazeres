# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'cliente.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QWidget, QFileDialog, QTableWidget, QTableWidgetItem
from dadosCliente import Ui_formDadosCliente

import tkinter
from tkinter import messagebox

import mysql.connector
import pandas as pd
import variaveisControle


################ VARIÁVEIS DE CONEXÃO COM BANXO DE DADOS  ################
host = variaveisControle.host
user = variaveisControle.user
password = variaveisControle.password
datatabase = variaveisControle.database


class Ui_FormCliente(object):
    def setupUi(self, FormCliente):
        FormCliente.setObjectName("FormCliente")
        FormCliente.resize(812, 788)
        FormCliente.setStyleSheet("background-color: rgb(129, 181, 200);")
        self.bt_adicionar = QtWidgets.QPushButton(FormCliente)
        self.bt_adicionar.setGeometry(QtCore.QRect(20, 20, 111, 101))
        self.bt_adicionar.setStyleSheet("image: url(:/adicionar_cliente/imagens/adicionar.png);\n"
"background-color: rgb(173, 200, 202);")
        self.bt_adicionar.setText("")
        self.bt_adicionar.setObjectName("bt_adicionar")
        self.bt_alterar = QtWidgets.QPushButton(FormCliente)
        self.bt_alterar.setGeometry(QtCore.QRect(160, 20, 111, 101))
        self.bt_alterar.setStyleSheet("image: url(:/alterar_cliente/imagens/editar.png);\n"
"background-color: rgb(173, 200, 202);")
        self.bt_alterar.setText("")
        self.bt_alterar.setObjectName("bt_alterar")
        self.bt_consultar = QtWidgets.QPushButton(FormCliente)
        self.bt_consultar.setGeometry(QtCore.QRect(300, 20, 111, 101))
        self.bt_consultar.setStyleSheet("image: url(:/consultar_cliente/imagens/pesquisar.png);\n"
"background-color: rgb(173, 200, 202);")
        self.bt_consultar.setText("")
        self.bt_consultar.setObjectName("bt_consultar")
        self.bt_retornar = QtWidgets.QPushButton(FormCliente)
        self.bt_retornar.setGeometry(QtCore.QRect(680, 20, 111, 101))
        self.bt_retornar.setStyleSheet("image: url(:/voltar/imagens/voltar.png);\n"
"background-color: rgb(173, 200, 202);")
        self.bt_retornar.setText("")
        self.bt_retornar.setObjectName("bt_retornar")
        self.bt_excluir = QtWidgets.QPushButton(FormCliente)
        self.bt_excluir.setGeometry(QtCore.QRect(440, 20, 111, 101))
        self.bt_excluir.setStyleSheet("image: url(:/excluir_cliente/imagens/deletar.png);\n"
"background-color: rgb(173, 200, 202);")
        self.bt_excluir.setText("")
        self.bt_excluir.setObjectName("bt_excluir")
        self.txt_nomeCliente = QtWidgets.QLineEdit(FormCliente)
        self.txt_nomeCliente.setGeometry(QtCore.QRect(190, 187, 441, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.txt_nomeCliente.setFont(font)
        self.txt_nomeCliente.setStyleSheet("border-radius: 15px;\n"
"background-color: rgb(255, 255, 255);\n"
"border-style: outset;\n"
"border-color: black;\n"
"border-width: 1px")
        self.txt_nomeCliente.setText("")
        self.txt_nomeCliente.setObjectName("txt_nomeCliente")
        self.lb_nomeCliente = QtWidgets.QLabel(FormCliente)
        self.lb_nomeCliente.setGeometry(QtCore.QRect(50, 180, 131, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lb_nomeCliente.setFont(font)
        self.lb_nomeCliente.setObjectName("lb_nomeCliente")
        self.bt_pesquisar = QtWidgets.QPushButton(FormCliente)
        self.bt_pesquisar.setGeometry(QtCore.QRect(640, 180, 51, 41))
        self.bt_pesquisar.setStyleSheet("image: url(:/pesquisa/imagens/pesquisa.png);\n"
"background-color: rgb(173, 200, 202);")
        self.bt_pesquisar.setText("")
        self.bt_pesquisar.setObjectName("bt_pesquisar")
        self.bt_pesquisarGeral = QtWidgets.QPushButton(FormCliente)
        self.bt_pesquisarGeral.setGeometry(QtCore.QRect(700, 180, 51, 41))
        self.bt_pesquisarGeral.setStyleSheet("image: url(:/pesquisageral/imagens/filtro.png);\n"
"background-color: rgb(173, 200, 202);")
        self.bt_pesquisarGeral.setText("")
        self.bt_pesquisarGeral.setObjectName("bt_pesquisarGeral")
        self.tb_cliente = QtWidgets.QTableWidget(FormCliente)
        self.tb_cliente.setGeometry(QtCore.QRect(20, 260, 771, 451))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        self.tb_cliente.setFont(font)
        self.tb_cliente.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.tb_cliente.setTextElideMode(QtCore.Qt.ElideRight)
        self.tb_cliente.setObjectName("tb_cliente")
        self.tb_cliente.setColumnCount(4)
        self.tb_cliente.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tb_cliente.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tb_cliente.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tb_cliente.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tb_cliente.setHorizontalHeaderItem(3, item)
        self.txt_totalCliente = QtWidgets.QLineEdit(FormCliente)
        self.txt_totalCliente.setGeometry(QtCore.QRect(690, 727, 101, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.txt_totalCliente.setFont(font)
        self.txt_totalCliente.setStyleSheet("border-radius: 15px;\n"
"background-color: rgb(255, 255, 255);\n"
"border-style: outset;\n"
"border-color: black;\n"
"border-width: 1px")
        self.txt_totalCliente.setText("")
        self.txt_totalCliente.setAlignment(QtCore.Qt.AlignCenter)
        self.txt_totalCliente.setReadOnly(True)
        self.txt_totalCliente.setPlaceholderText("")
        self.txt_totalCliente.setObjectName("txt_totalCliente")
        self.lb_totalCliente = QtWidgets.QLabel(FormCliente)
        self.lb_totalCliente.setGeometry(QtCore.QRect(550, 720, 131, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lb_totalCliente.setFont(font)
        self.lb_totalCliente.setObjectName("lb_totalCliente")

        self.retranslateUi(FormCliente)
        QtCore.QMetaObject.connectSlotsByName(FormCliente)

    def retranslateUi(self, FormCliente):
        _translate = QtCore.QCoreApplication.translate
        FormCliente.setWindowTitle(_translate("FormCliente", "Cliente"))
        self.bt_adicionar.setToolTip(_translate("FormCliente", "<html><head/><body><p align=\"center\"><span style=\" font-size:12pt; font-weight:600;\">Adicionar Cliente</span></p></body></html>"))
        self.bt_alterar.setToolTip(_translate("FormCliente", "<html><head/><body><p align=\"center\"><span style=\" font-size:12pt; font-weight:600;\">Editar Cliente</span></p></body></html>"))
        self.bt_consultar.setToolTip(_translate("FormCliente", "<html><head/><body><p align=\"center\"><span style=\" font-size:12pt; font-weight:600;\">Consultar Cliente</span></p></body></html>"))
        self.bt_retornar.setToolTip(_translate("FormCliente", "<html><head/><body><p align=\"center\"><span style=\" font-size:12pt; font-weight:600;\">Voltar</span></p></body></html>"))
        self.bt_excluir.setToolTip(_translate("FormCliente", "<html><head/><body><p align=\"center\"><span style=\" font-size:12pt; font-weight:600;\">Excluir Cliente</span></p></body></html>"))
        self.lb_nomeCliente.setText(_translate("FormCliente", "Nome Cliente:"))
        self.bt_pesquisar.setToolTip(_translate("FormCliente", "<html><head/><body><p align=\"center\"><span style=\" font-size:12pt; font-weight:600;\">Consultar Cliente por Nome</span></p></body></html>"))
        self.bt_pesquisarGeral.setToolTip(_translate("FormCliente", "<html><head/><body><p align=\"center\"><span style=\" font-size:12pt; font-weight:600;\">Verificar Lista Completa Cliente</span></p></body></html>"))
        item = self.tb_cliente.horizontalHeaderItem(0)
        item.setText(_translate("FormCliente", "ID"))
        item = self.tb_cliente.horizontalHeaderItem(1)
        item.setText(_translate("FormCliente", "Nome"))
        item = self.tb_cliente.horizontalHeaderItem(2)
        item.setText(_translate("FormCliente", "Telefone"))
        item = self.tb_cliente.horizontalHeaderItem(3)
        item.setText(_translate("FormCliente", "Cidade"))
        self.lb_totalCliente.setText(_translate("FormCliente", "Total Clientes:"))

##################################################################################################
######################################### BOTÕES SISTEMA #########################################
##################################################################################################

        self.bt_retornar.clicked.connect(lambda: self.sairTela(FormCliente))
        self.bt_pesquisarGeral.clicked.connect(self.pesquisarGeral)
        self.bt_pesquisar.clicked.connect(self.pesquisarCliente)
        self.bt_adicionar.clicked.connect(self.cadastrarCliente)
        self.bt_consultar.clicked.connect(self.consultarCliente)
        self.bt_alterar.clicked.connect(self.alterarCliente)
        self.bt_excluir.clicked.connect(self.excluirCliente)

###################################################################################################
######################################### FUNÇÕES SISTEMA #########################################
###################################################################################################

################ FECHAR telaCliente ################
    def sairTela (self, FormCliente):
        FormCliente.close()

################ Consultar tabelaCliente Geral ################
    def pesquisarGeral(self):
        mydb = mysql.connector.connect(
            host = host,
            user = user,
            password = password,
            database = datatabase
        )

        mycursor = mydb.cursor()
        mycursor.execute('SELECT * FROM cliente')
        myresult = mycursor.fetchall()
        df = pd.DataFrame(myresult, columns = ['ID', 'Nome', 'Telefone', 'Cidade'])
        self.all_data = df

        ## Carrega o arquivo na tabela tb_cliente ##
        numRows = len(self.all_data.index)
        self.tb_cliente.setColumnCount(len(self.all_data.columns))
        self.tb_cliente.setRowCount(numRows)
        self.tb_cliente.setHorizontalHeaderLabels(self.all_data.columns)

        for i in range(numRows):
            for j in range(len(self.all_data.columns)):
                self.tb_cliente.setItem(i, j, QTableWidgetItem(str(self.all_data.iat[i,j])))

        self.tb_cliente.resizeColumnsToContents()
        self.tb_cliente.resizeRowsToContents()
        self.txt_totalCliente.setText(str(len(myresult)))
        mycursor.close()

################ PESQUISAR CLIENTE ################
    def pesquisarCliente(self):
        mydb = mysql.connector.connect(
            host = host,
            user = user,
            password = password,
            database = datatabase
        )

        mycursor = mydb.cursor()
        nomeConsulta = self.txt_nomeCliente.text()
        consultaSQL = "SELECT * FROM cliente WHERE nome LIKE '" + nomeConsulta + "%'"
        mycursor.execute(consultaSQL)
        myresult = mycursor.fetchall()
        df = pd.DataFrame(myresult, columns = ['ID', 'Nome', 'Telefone', 'Cidade'])
        self.all_data = df
        root = tkinter.Tk()
        root.withdraw()

        ## Carrega o arquivo pelo nome na tabela tb_cliente ##
        if len(myresult) < 1:
            messagebox.showerror("Erro ao Consultar Cliente", "NENHUM CLIENTE ENCONTRADO")
        else:
            numRows = len(self.all_data.index)
            self.tb_cliente.setColumnCount(len(self.all_data.columns))
            self.tb_cliente.setRowCount(numRows)
            self.tb_cliente.setHorizontalHeaderLabels(self.all_data.columns)

            for i in range(numRows):
                for j in range(len(self.all_data.columns)):
                    self.tb_cliente.setItem(i, j, QTableWidgetItem(str(self.all_data.iat[i,j])))

            self.tb_cliente.resizeColumnsToContents()
            self.tb_cliente.resizeRowsToContents()
            self.txt_totalCliente.setText(str(len(myresult)))
            mycursor.close()

################ ABRIR TELA CADASTRAR CLIENTE ################
    def cadastrarCliente(self):
        variaveisControle.tipoTelaDadosCliente = 'incluir'

        self.formDadosCliente = QtWidgets.QWidget()
        self.ui = Ui_formDadosCliente()
        self.ui.setupUi(self.formDadosCliente)
        self.formDadosCliente.show()
        _translate = QtCore.QCoreApplication.translate
        self.formDadosCliente.setWindowTitle(_translate("formDadosCliente", "Cadastrar Cliente"))

################ ABRIR TELA CONSULTAR CLIENTE ################
    def consultarCliente(self):
        line = self.tb_cliente.currentRow()
        root = tkinter.Tk()
        root.withdraw()

        if line < 0:
            messagebox.showerror("Erro ao Consultar Cliente", "ESCOLHA UM CLIENTE PARA CONSULTAR")
        else:
            variaveisControle.tipoTelaDadosCliente = 'consultar'
            #line = self.tb_cliente.currentRow()
            item = self.tb_cliente.item(line, 0)
            variaveisControle.idConsulta = item.text()

            # Abertura de Tela consultarCliente #
            self.formDadosCliente = QtWidgets.QWidget()
            self.ui = Ui_formDadosCliente()
            self.ui.setupUi(self.formDadosCliente)
            self.formDadosCliente.show()
            _translate = QtCore.QCoreApplication.translate
            self.formDadosCliente.setWindowTitle(_translate("formDadosCliente", "Consultar Cliente"))

################ ABRIR TELA ALTERAR CLIENTE ################
    def alterarCliente(self):
        line = self.tb_cliente.currentRow()
        root = tkinter.Tk()
        root.withdraw()

        if line < 0:
            messagebox.showerror("Erro ao Alterar Cliente", "ESCOLHA UM CLIENTE PARA ALTERAR")
        else:
            variaveisControle.tipoTelaDadosCliente = 'alterar'
            #line = self.tb_cliente.currentRow()
            item = self.tb_cliente.item(line, 0)
            variaveisControle.idConsulta = item.text()

            # Abertura de Tela AlterarrCliente #
            self.formDadosCliente = QtWidgets.QWidget()
            self.ui = Ui_formDadosCliente()
            self.ui.setupUi(self.formDadosCliente)
            self.formDadosCliente.show()
            _translate = QtCore.QCoreApplication.translate
            self.formDadosCliente.setWindowTitle(_translate("formDadosCliente", "Alterar Cliente"))

################ EXCLUIR CLIENTE ################
    def excluirCliente(self):
        line = self.tb_cliente.currentRow()
        root = tkinter.Tk()
        root.withdraw()

        if line < 0:
            messagebox.showerror("Erro ao Excluir Cliente", "ESCOLHA UM CLIENTE PARA EXCLUIR")
        else:
            #line = self.tb_cliente.currentRow()
            item = self.tb_cliente.item(line, 0)
            idCliente = item.text()

            # Conexão Banco de Dados #
            mydb = mysql.connector.connect(
                host = host,
                user = user,
                password = password,
                database = datatabase
            )
            mycursor = mydb.cursor()
            sql = "DELETE FROM cliente WHERE idCliente = '" + idCliente + "'"
            mycursor.execute(sql)
            mydb.commit()
            
            # Atualizar Tabela #
            mycursor.execute('SELECT * FROM cliente')
            myresult = mycursor.fetchall()
            df = pd.DataFrame(myresult, columns = ['ID', 'Nome', 'Telefone', 'Cidade'])
            self.all_data = df

            ## Carrega o arquivo na tabela tb_cliente ##
            numRows = len(self.all_data.index)
            self.tb_cliente.setColumnCount(len(self.all_data.columns))
            self.tb_cliente.setRowCount(numRows)
            self.tb_cliente.setHorizontalHeaderLabels(self.all_data.columns)

            for i in range(numRows):
                for j in range(len(self.all_data.columns)):
                    self.tb_cliente.setItem(i, j, QTableWidgetItem(str(self.all_data.iat[i,j])))

            self.tb_cliente.resizeColumnsToContents()
            self.tb_cliente.resizeRowsToContents()
            mycursor.close()
            messagebox.showinfo("Cliente Excluido", "CLIENTE EXCLUIDO COM SUCESSO")


import adicionar_cliente
import alterar_cliente
import consultar_cliente
import excluir_cliente
import pesquisa
import pesquisageral
import voltar


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    FormCliente = QtWidgets.QWidget()
    ui = Ui_FormCliente()
    ui.setupUi(FormCliente)
    FormCliente.show()
    sys.exit(app.exec_())
